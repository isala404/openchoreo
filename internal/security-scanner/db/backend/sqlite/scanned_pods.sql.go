// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: scanned_pods.sql

package sqlite

import (
	"context"
)

const deleteScannedPod = `-- name: DeleteScannedPod :exec
DELETE FROM scanned_pods WHERE id = ?
`

func (q *Queries) DeleteScannedPod(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteScannedPod, id)
	return err
}

const getScannedPod = `-- name: GetScannedPod :one
SELECT id, pod_name FROM scanned_pods WHERE id = ?
`

func (q *Queries) GetScannedPod(ctx context.Context, id int64) (ScannedPod, error) {
	row := q.db.QueryRowContext(ctx, getScannedPod, id)
	var i ScannedPod
	err := row.Scan(&i.ID, &i.PodName)
	return i, err
}

const getScannedPodByName = `-- name: GetScannedPodByName :one
SELECT id, pod_name FROM scanned_pods WHERE pod_name = ?
`

func (q *Queries) GetScannedPodByName(ctx context.Context, podName string) (ScannedPod, error) {
	row := q.db.QueryRowContext(ctx, getScannedPodByName, podName)
	var i ScannedPod
	err := row.Scan(&i.ID, &i.PodName)
	return i, err
}

const insertScannedPod = `-- name: InsertScannedPod :exec
INSERT INTO scanned_pods (pod_name) VALUES (?)
`

func (q *Queries) InsertScannedPod(ctx context.Context, podName string) error {
	_, err := q.db.ExecContext(ctx, insertScannedPod, podName)
	return err
}

const listScannedPods = `-- name: ListScannedPods :many
SELECT id, pod_name FROM scanned_pods
`

func (q *Queries) ListScannedPods(ctx context.Context) ([]ScannedPod, error) {
	rows, err := q.db.QueryContext(ctx, listScannedPods)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ScannedPod{}
	for rows.Next() {
		var i ScannedPod
		if err := rows.Scan(&i.ID, &i.PodName); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
